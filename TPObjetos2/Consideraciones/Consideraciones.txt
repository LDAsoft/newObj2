	Escribimos aca(si les gusta mas otro medio, simplemente diganlo) las cosas que vemos y asÃ­, decidimos entre todos que hacemos.
Hasta los DETALLES que vean diganlos, asÃ­ estamos de acuerdo en todo, o al menos sabemos, AHORA SI, porque se toman ciertas decisiones.

Marcos: 
		-Detallecito 1: el mensaje en el diagrama -> reservasFuturas(): List<Reservas>
		se repite en las subclases de Usuario. Si la subimos, PIOLA. 
		MARI --> ok, tengo que verlo, si hacen lo mismo lo subo.
		
		-Detallecito 2: privacidad de ciertos mensajes
		
		Todo lo que toque fue porque odio las marcas rojas jaja
		Pero no cambie nada que no haya que pisar luego con TDD.
		Los tests(que no estan hechos con mocks) no importan porque los vamos a pisar, pero los dejo
		como orientacion.
		
		Toque el diagrama de clases, pero mejor que se encargue la analista, porque a mi me hincho los huevos
		y no pude hacer todo lo que quise. 
		MARI --> ahi lo tunie, creo que ya esta reflejando lo que queremos
		
		RECUERDENME(a travez del UML) como habiamos quedado si el hotel tenia a su duenio o un hotelero
		tiene una lista de hoteles.
		MARI --> el hotel conoce su duenio. Ya lo puse en el diagrama
		
		Tambien modifique un poquitin el algortimo de la busqueda compuesta. 
		Ah y tambien lo de las benditas formas de pago. Saludos :D
		
		
		MARI --> bueno... el sistema va a tener un gestor de servar que es el que le
		va a responder las consultas a los usuarios. En principio (ademas de la las reservas)
		 el sistema va a tener que pasarle la lista de hoteles para hacer las consultas 
		 de los hoteleros
		MARCOS --> Incluso puede pasarse a el mismo al Gestor, y que le gestor le saque lo que necesite jaja 
		 	   --> Antes de RESERVAR, hay que verificar si se puede reservar(para "manejar" la concurrencia.)

		 	   --> Y Repito algo, no era que la RESERVA tenia habitaciones? asi estaba en la foto del
		 	   --> diagrama que vimos en clases!! 
		 	   --> y que la habitacion conocia a su hotel? y que el hotel a su duenio?
		MARI (LUNES 7) --> NOOOOOOO, esta mal esa flecha en el diagrama del viernes! 
		¿como la reserva va a tener habitaciones?, no tiene sentido
		
		detallecito--> en el uml dice que hotel tiene pais, eso mandalo a la ciudad. 
		MARI (LUNES 7) --> listo, ya lo cambie en el diagrama y en el codigo
		
		MARI(LUNES 7) --> sugiero poner getters y setters SOLO a lo que hace falta y no meterselo a todo porque
		el porcentaje que codigo que esta testeado se nos va a la mierda y no nos vamos a poner a testear gets y sets
		
		MARI(LUNES 7) --> hay que desarrollar que el hotel tenga una lista de formas de pago. Creo que con que haga
		metodo que se pueda agregar y quitar alguna forma ya estaríamos cubiertos.
		Esta hecha la estructura que me salio por tdd pero no le encuentro comportamiento para testear... ¿alguna idea?
		se me ocurre ver si la tarjeta esta vencida, pero creo que ya nos estamos yendo de enunciado al pedo
		
		
		MARCOS(MARTES 8) --> Agregue una clse BodyMailBuilder, que solo arma el cuerpo del mail. 
			--> Agregue un GestorCorreo, que esta como observer del GestorConsultas, asi cuando se reserva, este flaco
				envia los mails correspondientes, nada.
			--> Ya escribi los nombres de los tests, deberian testear todo y nada mas, hay un par de cosas en habitacion
				o en hotel(agustin) que agregue msjs que tenes que solucionar jaja, el nombre es claro igual respecto a
				lo que necesito que hagan. 
				MARIU: ya que dijiste "yo", ahi te puse en tu paquete de test, la bateria que tenes que testear! 
				Suerte con eso jajajaja
				Ah y en cuanto tengas tiempo actualiza el grafico que te sale tan bonito :D jaja
				 
		
		